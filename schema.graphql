enum Advantage {
  """
  Roll with advantage
  """
  advantage

  """
  Roll with a disadvantage
  """
  disadvantage

  """
  Default, normal roll with no advantage nor disadvantage
  """
  normal
}

interface BaseInterface {
  id: ID!
}

type Dice implements BaseInterface {
  dice: String!
  id: ID!
  isAdvantage: Boolean
  rollId: Int
  rolledAt: ISO8601DateTime!
  value: Int!
}

"""
The connection type for Dice.
"""
type DiceConnection {
  """
  A list of edges.
  """
  edges: [DiceEdge]

  """
  A list of nodes.
  """
  nodes: [Dice]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DiceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Dice
}

"""
A string following the dice notation ex: "2d12" or "1d4+2d20"
"""
scalar Dices

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

type Mutation {
  roll(
    """
    Parameters for RollMutation
    """
    input: RollMutationInput!
  ): Roll!

  """
  An example field added by the generator
  """
  testField: String!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type Query {
  roll(id: ID!): Roll!

  """
  A string following the dice notation ex: "2d12" or "1d4+2d20"
  """
  rolls(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RollConnection!
}

type Roll implements BaseInterface {
  advantageDices(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DiceConnection
  advantageType: Advantage!
  dices(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DiceConnection
  dicesCount: Int
  id: ID!
  rolledAt: ISO8601DateTime!
  total: Int!
}

"""
The connection type for Roll.
"""
type RollConnection {
  """
  A list of edges.
  """
  edges: [RollEdge]

  """
  A list of nodes.
  """
  nodes: [Roll]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RollEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Roll
}

"""
Autogenerated input type of RollMutation
"""
input RollMutationInput {
  advantage: Advantage = normal

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  dices: Dices!
}
